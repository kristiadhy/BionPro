@using System.Net.Http.Headers
@using Web.Services.IHttpRepository

@if (ImageUrl is not null)
{
    <img src=@ImageUrl alt="Product Image" class="rounded-1 w-50" />
}

<InputFile OnChange="@HandleSelected" id="file-upload" />

@* <RadzenUpload id="ddUpload"
              @ref="uploadDD"
              ChooseText="Drag and drop here or click to choose files"
              Auto="false"
              Multiple="false"
              Url="api/products/upload"
              Accept="image/*"
              InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})"
              Progress=@TrackProgress
              Complete=@CompleteUpload
              Change=@(args => FileChange(args))
              class="w-100" /> *@
@* <RadzenProgressBar Value=@progress class="mt-4" Visible=@showProgress /> *@

@code {
    private IBrowserFile? imageFile;
    private string? ImageUrl;

    [Inject]
    IServiceManager ServiceManager { get; set; } = default!;

    [Parameter]
    public string? ImageFileName { get; set; }

    [Parameter]
    public EventCallback<string?> FileChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(ImageFileName))
        {
            byte[]? byteImage = await ServiceManager.ProductService.GetProductImage(ImageFileName);
            if (byteImage != null)
            {
                var base64Image = Convert.ToBase64String(byteImage);
                ImageUrl = $"data:image/png;base64,{base64Image}";
            }
        }

        await base.OnInitializedAsync();
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        imageFile = e.File;

        if (imageFile is null)
            return;

        var base64Image = await ImageProcessService.DisplayImage(imageFile);
        ImageUrl = $"data:image/png;base64,{base64Image}";

        await FileChanged.InvokeAsync(imageFile.Name);
    }

    public async Task StartUpload()
    {
        if (imageFile == null)
            return;

        var resizedFile = await imageFile.RequestImageFileAsync("image/png", 300, 500);

        using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
        {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", imageFile.Name);

            var ImageFromServer = await ServiceManager.ProductService.UploadProductImage(content);
        }
    }

    // private RadzenUpload uploadDD = default!;
    // private int progress = 0;
    // private bool showProgress = false;
    // private bool showComplete = false;
    // private string completionMessage = string.Empty;
    // private bool cancelUpload = false;
    // private string? fileName;

    // private void CompleteUpload(UploadCompleteEventArgs args)
    // {
    //     if (!args.Cancelled)
    //         completionMessage = "Upload Complete!";
    //     else
    //         completionMessage = "Upload Cancelled!";

    //     showProgress = false;
    //     showComplete = true;
    // }

    // private void TrackProgress(UploadProgressArgs args)
    // {
    //     showProgress = true;
    //     showComplete = false;
    //     progress = args.Progress;

    //     // cancel upload
    //     args.Cancel = cancelUpload;

    //     // reset cancel flag
    //     cancelUpload = false;
    // }

    // private void FileChange(UploadChangeEventArgs args)
    // {
    //     imageFile = args.Files?.FirstOrDefault();

    //     fileName = imageFile?.Name;
    //     FileChanged.InvokeAsync(fileName);
    // }

    // public void CancelUpload()
    // {
    //     cancelUpload = true;
    // }

    // public async Task StartUpload()
    // {
    //     await uploadDD.Upload();
    // }
}


@* <style>
    #ddUpload {
        left: 0;
    }

        #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose {
            width: 100%;
            text-align: center;
            padding: 100px 0;
            border-radius: 0;
        }
</style> *@