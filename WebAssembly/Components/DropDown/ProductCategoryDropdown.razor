<div class="rz-display-flex">
    <RadzenDropDown TValue="int?"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    FilterOperator="StringFilterOperator.StartsWith"
                    AllowFiltering="true"
                    Placeholder="Product Category"
                    Data=@ProductCategoryDropdownState.ProductCategoryListDropdown
                    TextProperty="@nameof(ProductCategoryDto.Name)"
                    ValueProperty="@nameof(ProductCategoryDto.CategoryID)"
                    AllowClear="true"
                    AllowVirtualization="true"
                    Disabled="@IsLoading"
                    Change="(args=> OnValueChanged(args))"
                    @bind-Value="@SelectedValue"
                    Style="width: 100%; max-width: 400px;"
                    Name="ProductCategory" />

    @if (IsLoading)
    {
        <RadzenProgressBarCircular Value="100"
                                   ShowValue="false"
                                   Mode="ProgressBarMode.Indeterminate"
                                   Size="ProgressBarCircularSize.ExtraSmall"
                                   class="ms-2 mt-2" />
    }
</div>
@code {
    //@bind-Value="@SelectedValue"

    [Inject]
    ProductCategoryDropdownState ProductCategoryDropdownState { get; set; } = default!;

    private bool IsLoading = false;

    protected override async Task OnInitializedAsync()
    {
        if (!ProductCategoryDropdownState.ProductCategoryListDropdown.Any())
        {
            IsLoading = true;
            await ProductCategoryDropdownState.LoadProductCategoriesDropDown();
            IsLoading = false;
        }

        await base.OnInitializedAsync();
    }

    [CascadingParameter]
    public EditContext? EditContext { get; set; }

    [Parameter]
    public EventCallback<int?> SelectedValueChanged { get; set; }

    [Parameter]
    public int? SelectedValue { get; set; }

    // private int? _selectedValue;
    // [Parameter]
    // public int? SelectedValue
    // {
    //     get => _selectedValue;
    //     set
    //     {
    //         if (_selectedValue != value)
    //         {
    //             _selectedValue = value;
    //             SelectedValueChanged.InvokeAsync(value);
    //         }
    //     }
    // }

    private async Task OnValueChanged(object e)
    {
        SelectedValue = e is not null ? (int)Convert.ChangeType(e, typeof(int)) : null;
        await SelectedValueChanged.InvokeAsync(SelectedValue);
        EditContext?.NotifyFieldChanged(EditContext.Field(nameof(ProductCategoryDto.CategoryID)));
    }
}
