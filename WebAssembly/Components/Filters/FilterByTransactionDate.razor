@using WebAssembly.Shared.Extensions
@using static WebAssembly.Shared.Enum.DataFilterEnum

<FilterHeaderText HeaderText="By Transaction Date" OnButtonClearClick="OnButtonClearClick" />

<MainMenuContainer>
    <RadzenDropDown @ref="ParentDropDown"
                    @bind-Value=@ParentSelectedValue
                    Data="@ParentDropDownData"
                    AllowClear="true"
                    Change="@((args) => OnTimePeriodChange(args))"
                    Placeholder="Select Time Period"
                    Name="ParentTimePeriod" />

    <RadzenDropDown @bind-Value=@DetailSelectedValue
                    Data="@DetailDropdownData"
                    Placeholder="Select Detail Period"
                    AllowClear="true"
                    Change="@((args) => OnDetailTimePeriodChange(args))"
                    Disabled="@IsDetailDropdownDisabled"
                    Name="DetailTimePeriod" />

    <RadzenDatePicker @bind-Value="@StartDateValue"
                      DateFormat="dd/MM/yyyy"
                      Change="@((args) => OnStartDateChange(args))"
                      Name="StartDate" />

    <RadzenDatePicker @bind-Value="@EndDateValue"
                      DateFormat="dd/MM/yyyy"
                      Change="@((args) => OnEndDateChange(args))"
                      Name="EndDate" />
</MainMenuContainer>

@code {
    [Parameter]
    public TimePeriod? ParentSelectedValue { get; set; }
    [Parameter]
    public Enum? DetailSelectedValue { get; set; }
    [Parameter]
    public DateTime? StartDateValue { get; set; }
    [Parameter]
    public DateTime? EndDateValue { get; set; }
    [Parameter]
    public bool IsFilterSet { get; set; }
    [Parameter]
    public bool IsFilterByDateActive { get; set; }

    [Parameter]
    public EventCallback<TimePeriod?> ParentSelectedValueChanged { get; set; }
    [Parameter]
    public EventCallback<Enum?> DetailSelectedValueChanged { get; set; }
    [Parameter]
    public EventCallback<DateTime?> StartDateValueChanged { get; set; }
    [Parameter]
    public EventCallback<DateTime?> EndDateValueChanged { get; set; }
    [Parameter]
    public EventCallback<bool> IsFilterSetChanged { get; set; }
    [Parameter]
    public EventCallback<bool> IsFilterByDateActiveChanged { get; set; }
    [Parameter]
    public EventCallback ButtonClearFilterClicked { get; set; }

    private bool IsDetailDropdownDisabled = false;

    private RadzenDropDown<TimePeriod?>? ParentDropDown;
    private IEnumerable<Enum>? ParentDropDownData;
    private IEnumerable<Enum>? DetailDropdownData;

    public FilterByTransactionDate()
    {
        ParentDropDownData = Enum.GetValues(typeof(TimePeriod)).Cast<Enum>();
    }

    protected override async Task OnInitializedAsync()
    {
        //If filter never set before, then set the default value to "By Day"
        if (!IsFilterSet)
        {
            ParentSelectedValue = (TimePeriod)ParentDropDownData!.First();
            await ParentSelectedValueChanged.InvokeAsync(ParentSelectedValue);
        }

        //Load time period detail dropdown data based on selected parent dropdown data
        //For ex: By Day -> Today, Yesterday, Last 3 Days, etc
        await LoadTimePeriodDetail((TimePeriod)ParentSelectedValue!);

        //Once the filter is set, change the IsFilterSet to true
        IsFilterSet = true;
        await IsFilterSetChanged.InvokeAsync(IsFilterSet);

        await base.OnInitializedAsync();
    }

    private async Task LoadTimePeriodDetail(TimePeriod timePeriod)
    {
        //Load the DetailDropdownData based on the selected ParentDropDownData
        DetailDropdownData = TimePeriodFilterService.SetDetailTimePeriod(timePeriod);

        //No DetailDropdownData data means that the choice is "Custom by date", hence disable the DetailDropdown
        IsDetailDropdownDisabled = !DetailDropdownData.Any();

        //Select default value for DetailDropdownData by the first selection
        if (!IsFilterSet)
        {
            DetailSelectedValue = DetailDropdownData?.FirstOrDefault();
            await DetailSelectedValueChanged.InvokeAsync(DetailSelectedValue);
            await OnDetailTimePeriodChange(DetailSelectedValue);
        }
    }

    private async Task OnTimePeriodChange(object? timePeriod)
    {
        if (timePeriod is null)
            return;

        ParentSelectedValue = (TimePeriod)timePeriod;
        await ParentSelectedValueChanged.InvokeAsync(ParentSelectedValue);

        await LoadTimePeriodDetail((TimePeriod)ParentSelectedValue);

        DetailSelectedValue = DetailDropdownData?.FirstOrDefault();
        await DetailSelectedValueChanged.InvokeAsync(DetailSelectedValue);

        //We trigger this method so the start date and end date value will be set based on the selected detail time period
        await OnDetailTimePeriodChange(DetailSelectedValue);
    }

    private async Task OnDetailTimePeriodChange(object? detailTimePeriod)
    {
        if (detailTimePeriod is null) return;

        DetailSelectedValue = (Enum)detailTimePeriod;
        await DetailSelectedValueChanged.InvokeAsync(DetailSelectedValue);

        var bothDateValue = TimePeriodFilterService.SetDateRangeBasedOnDetailSelection(DetailSelectedValue);
        StartDateValue = bothDateValue.Item1;
        await StartDateValueChanged.InvokeAsync(StartDateValue);
        EndDateValue = bothDateValue.Item2;
        await EndDateValueChanged.InvokeAsync(EndDateValue);
    }

    private async Task OnStartDateChange(DateTime? startDate)
    {
        if (startDate is null) return;

        await SetParentCustomDateByDate();
        StartDateValue = startDate.Value;
        await StartDateValueChanged.InvokeAsync(StartDateValue);
    }

    private async Task OnEndDateChange(DateTime? endDate)
    {
        if (endDate is null) return;

        await SetParentCustomDateByDate();
        EndDateValue = endDate.Value;
        await EndDateValueChanged.InvokeAsync(EndDateValue);
    }

    private async Task SetParentCustomDateByDate()
    {
        if ((TimePeriod)ParentDropDown!.SelectedItem != TimePeriod.ByCustomDate)
        {
            ParentSelectedValue = TimePeriod.ByCustomDate;
            await OnTimePeriodChange(ParentSelectedValue);
        }
    }

    private async Task OnButtonClearClick()
    {
        IsFilterByDateActive = false;
        await IsFilterByDateActiveChanged.InvokeAsync(IsFilterByDateActive);

        await ButtonClearFilterClicked.InvokeAsync();
    }
}
